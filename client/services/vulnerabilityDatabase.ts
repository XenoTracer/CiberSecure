export interface VulnerabilityDefinition {
  id: string;
  name: string;
  category: string;
  owasp: string;
  cwe: string;
  severity: "info" | "low" | "medium" | "high" | "critical";
  description: string;
  impact: string;
  remediation: string;
  references: string[];
  testPatterns: string[];
  likelihood: number; // 0-1 probability of occurrence
}

export const VULNERABILITY_DATABASE: VulnerabilityDefinition[] = [
  // Injection Vulnerabilities
  {
    id: "sql-injection-classic",
    name: "SQL Injection",
    category: "Injection",
    owasp: "A03:2021 – Injection",
    cwe: "CWE-89",
    severity: "high",
    description:
      "Application accepts untrusted data and uses it in SQL queries without proper validation or parameterization.",
    impact:
      "Data breach, data corruption, unauthorized access, complete system compromise",
    remediation:
      "Use parameterized queries, input validation, least privilege principles",
    references: ["https://owasp.org/www-community/attacks/SQL_Injection"],
    testPatterns: ["/login", "/search", "/user", "/product"],
    likelihood: 0.15,
  },
  {
    id: "nosql-injection",
    name: "NoSQL Injection",
    category: "Injection",
    owasp: "A03:2021 – Injection",
    cwe: "CWE-943",
    severity: "high",
    description:
      "NoSQL databases vulnerable to injection attacks through unvalidated user input",
    impact: "Data extraction, authentication bypass, denial of service",
    remediation: "Input validation, use of database-specific security measures",
    references: [
      "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection",
    ],
    testPatterns: ["/api", "/search", "/filter"],
    likelihood: 0.08,
  },
  {
    id: "ldap-injection",
    name: "LDAP Injection",
    category: "Injection",
    owasp: "A03:2021 – Injection",
    cwe: "CWE-90",
    severity: "medium",
    description: "LDAP queries constructed with unvalidated user input",
    impact: "Information disclosure, authentication bypass",
    remediation: "Input validation, parameterized LDAP queries",
    references: ["https://owasp.org/www-community/attacks/LDAP_Injection"],
    testPatterns: ["/auth", "/directory", "/user"],
    likelihood: 0.03,
  },

  // Cross-Site Scripting (XSS)
  {
    id: "reflected-xss",
    name: "Reflected Cross-Site Scripting",
    category: "Cross-Site Scripting",
    owasp: "A03:2021 – Injection",
    cwe: "CWE-79",
    severity: "medium",
    description: "User input reflected in response without proper encoding",
    impact: "Session hijacking, credential theft, defacement",
    remediation: "Output encoding, Content Security Policy, input validation",
    references: ["https://owasp.org/www-community/attacks/xss/"],
    testPatterns: ["/search", "/error", "/redirect"],
    likelihood: 0.25,
  },
  {
    id: "stored-xss",
    name: "Stored Cross-Site Scripting",
    category: "Cross-Site Scripting",
    owasp: "A03:2021 – Injection",
    cwe: "CWE-79",
    severity: "high",
    description: "Malicious scripts stored and executed for other users",
    impact: "Persistent attacks, widespread user compromise",
    remediation: "Input sanitization, output encoding, CSP headers",
    references: ["https://owasp.org/www-community/attacks/xss/"],
    testPatterns: ["/comment", "/profile", "/forum", "/upload"],
    likelihood: 0.12,
  },
  {
    id: "dom-xss",
    name: "DOM-based Cross-Site Scripting",
    category: "Cross-Site Scripting",
    owasp: "A03:2021 – Injection",
    cwe: "CWE-79",
    severity: "medium",
    description: "Client-side script execution through DOM manipulation",
    impact: "Client-side attacks, session hijacking",
    remediation: "Safe DOM manipulation, input validation",
    references: ["https://owasp.org/www-community/attacks/DOM_Based_XSS"],
    testPatterns: ["/", "/search", "/dashboard"],
    likelihood: 0.18,
  },

  // Broken Authentication
  {
    id: "weak-password-policy",
    name: "Weak Password Policy",
    category: "Authentication",
    owasp: "A07:2021 – Identification and Authentication Failures",
    cwe: "CWE-521",
    severity: "medium",
    description: "Insufficient password complexity requirements",
    impact: "Account takeover through brute force attacks",
    remediation: "Implement strong password policies, account lockout, MFA",
    references: [
      "https://owasp.org/www-community/controls/Password_Authentication",
    ],
    testPatterns: ["/register", "/reset-password"],
    likelihood: 0.35,
  },
  {
    id: "session-fixation",
    name: "Session Fixation",
    category: "Authentication",
    owasp: "A07:2021 – Identification and Authentication Failures",
    cwe: "CWE-384",
    severity: "medium",
    description:
      "Application doesn't regenerate session ID after authentication",
    impact: "Session hijacking, unauthorized access",
    remediation: "Regenerate session IDs, secure session management",
    references: ["https://owasp.org/www-community/attacks/Session_fixation"],
    testPatterns: ["/login", "/auth"],
    likelihood: 0.08,
  },

  // Security Misconfigurations
  {
    id: "directory-traversal",
    name: "Directory Traversal",
    category: "Path Traversal",
    owasp: "A01:2021 – Broken Access Control",
    cwe: "CWE-22",
    severity: "high",
    description: "Access to files and directories outside web root",
    impact: "Information disclosure, system file access",
    remediation: "Input validation, file access controls, sandboxing",
    references: ["https://owasp.org/www-community/attacks/Path_Traversal"],
    testPatterns: ["/download", "/file", "/image", "/document"],
    likelihood: 0.12,
  },
  {
    id: "information-disclosure",
    name: "Information Disclosure",
    category: "Information Exposure",
    owasp: "A01:2021 – Broken Access Control",
    cwe: "CWE-200",
    severity: "low",
    description:
      "Sensitive information exposed through error messages or headers",
    impact: "Information gathering for further attacks",
    remediation: "Custom error pages, remove debug information",
    references: ["https://owasp.org/www-community/Improper_Error_Handling"],
    testPatterns: ["/", "/error", "/debug"],
    likelihood: 0.45,
  },

  // Insecure Direct Object References
  {
    id: "idor-numeric",
    name: "Insecure Direct Object Reference",
    category: "Broken Access Control",
    owasp: "A01:2021 – Broken Access Control",
    cwe: "CWE-639",
    severity: "medium",
    description: "Direct access to objects using predictable identifiers",
    impact: "Unauthorized data access, privilege escalation",
    remediation: "Access control checks, indirect references",
    references: [
      "https://owasp.org/www-community/Top_10-2017_A5-Broken_Access_Control",
    ],
    testPatterns: ["/user/", "/document/", "/order/", "/profile/"],
    likelihood: 0.22,
  },

  // Security Headers
  {
    id: "missing-hsts",
    name: "Missing HTTP Strict Transport Security",
    category: "Security Headers",
    owasp: "A05:2021 – Security Misconfiguration",
    cwe: "CWE-16",
    severity: "low",
    description: "HSTS header not implemented",
    impact: "Man-in-the-middle attacks, protocol downgrade",
    remediation: "Implement HSTS header with appropriate max-age",
    references: ["https://owasp.org/www-community/Security_Headers"],
    testPatterns: ["/"],
    likelihood: 0.6,
  },
  {
    id: "missing-csp",
    name: "Missing Content Security Policy",
    category: "Security Headers",
    owasp: "A05:2021 – Security Misconfiguration",
    cwe: "CWE-16",
    severity: "medium",
    description: "No Content Security Policy implemented",
    impact: "XSS attacks, code injection",
    remediation: "Implement comprehensive CSP header",
    references: [
      "https://owasp.org/www-community/controls/Content_Security_Policy",
    ],
    testPatterns: ["/"],
    likelihood: 0.7,
  },

  // API Security
  {
    id: "api-rate-limiting",
    name: "Missing API Rate Limiting",
    category: "API Security",
    owasp: "A04:2021 – Insecure Design",
    cwe: "CWE-770",
    severity: "medium",
    description: "API endpoints lack rate limiting controls",
    impact: "Denial of service, resource exhaustion",
    remediation: "Implement rate limiting, request throttling",
    references: ["https://owasp.org/www-project-api-security/"],
    testPatterns: ["/api/", "/rest/", "/graphql"],
    likelihood: 0.4,
  },
  {
    id: "api-authentication",
    name: "Weak API Authentication",
    category: "API Security",
    owasp: "A02:2021 – Cryptographic Failures",
    cwe: "CWE-287",
    severity: "high",
    description: "API lacks proper authentication mechanisms",
    impact: "Unauthorized API access, data breach",
    remediation: "Implement strong API authentication (OAuth, JWT)",
    references: ["https://owasp.org/www-project-api-security/"],
    testPatterns: ["/api/", "/rest/"],
    likelihood: 0.18,
  },

  // File Upload Vulnerabilities
  {
    id: "unrestricted-file-upload",
    name: "Unrestricted File Upload",
    category: "File Upload",
    owasp: "A04:2021 – Insecure Design",
    cwe: "CWE-434",
    severity: "high",
    description: "File upload without proper validation",
    impact: "Remote code execution, malware upload",
    remediation: "File type validation, size limits, virus scanning",
    references: [
      "https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload",
    ],
    testPatterns: ["/upload", "/file-upload", "/media"],
    likelihood: 0.15,
  },

  // Business Logic Flaws
  {
    id: "race-condition",
    name: "Race Condition",
    category: "Business Logic",
    owasp: "A04:2021 – Insecure Design",
    cwe: "CWE-362",
    severity: "medium",
    description: "Concurrent operations lead to unexpected behavior",
    impact: "Data corruption, unauthorized access",
    remediation: "Proper synchronization, atomic operations",
    references: [
      "https://owasp.org/www-community/vulnerabilities/Race_condition",
    ],
    testPatterns: ["/payment", "/transfer", "/booking"],
    likelihood: 0.05,
  },

  // Cryptographic Issues
  {
    id: "weak-encryption",
    name: "Weak Cryptographic Implementation",
    category: "Cryptography",
    owasp: "A02:2021 – Cryptographic Failures",
    cwe: "CWE-327",
    severity: "high",
    description: "Use of weak or outdated cryptographic algorithms",
    impact: "Data exposure, credential compromise",
    remediation: "Use strong, current cryptographic standards",
    references: ["https://owasp.org/www-community/Weak_Cryptography"],
    testPatterns: ["/", "/login", "/api"],
    likelihood: 0.25,
  },

  // Command Injection
  {
    id: "command-injection",
    name: "OS Command Injection",
    category: "Injection",
    owasp: "A03:2021 – Injection",
    cwe: "CWE-78",
    severity: "critical",
    description: "Execution of arbitrary operating system commands",
    impact: "Complete system compromise, data theft",
    remediation: "Input validation, use safe APIs, sandboxing",
    references: ["https://owasp.org/www-community/attacks/Command_Injection"],
    testPatterns: ["/ping", "/traceroute", "/system"],
    likelihood: 0.02,
  },

  // XXE and XML Issues
  {
    id: "xxe-injection",
    name: "XML External Entity Injection",
    category: "XML",
    owasp: "A05:2021 – Security Misconfiguration",
    cwe: "CWE-611",
    severity: "high",
    description: "XML parser processes external entities",
    impact: "Information disclosure, SSRF, DoS",
    remediation: "Disable external entity processing, use safe parsers",
    references: [
      "https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing",
    ],
    testPatterns: ["/xml", "/soap", "/api"],
    likelihood: 0.08,
  },

  // CSRF
  {
    id: "csrf-token-missing",
    name: "Cross-Site Request Forgery",
    category: "CSRF",
    owasp: "A01:2021 – Broken Access Control",
    cwe: "CWE-352",
    severity: "medium",
    description: "State-changing operations lack CSRF protection",
    impact: "Unauthorized actions on behalf of users",
    remediation: "Implement CSRF tokens, SameSite cookies",
    references: ["https://owasp.org/www-community/attacks/csrf"],
    testPatterns: ["/transfer", "/delete", "/update", "/settings"],
    likelihood: 0.3,
  },

  // Server-Side Request Forgery
  {
    id: "ssrf-vulnerability",
    name: "Server-Side Request Forgery",
    category: "SSRF",
    owasp: "A10:2021 – Server-Side Request Forgery",
    cwe: "CWE-918",
    severity: "high",
    description: "Server makes requests to unintended locations",
    impact: "Internal network access, data exfiltration",
    remediation: "URL validation, whitelist allowed destinations",
    references: [
      "https://owasp.org/www-community/attacks/Server_Side_Request_Forgery",
    ],
    testPatterns: ["/proxy", "/fetch", "/webhook"],
    likelihood: 0.1,
  },
];

export function getVulnerabilityByCategory(
  category: string,
): VulnerabilityDefinition[] {
  return VULNERABILITY_DATABASE.filter((vuln) => vuln.category === category);
}

export function getVulnerabilitiesBySeverity(
  severity: string,
): VulnerabilityDefinition[] {
  return VULNERABILITY_DATABASE.filter((vuln) => vuln.severity === severity);
}

export function getRandomVulnerabilities(
  count: number = 5,
): VulnerabilityDefinition[] {
  const shuffled = [...VULNERABILITY_DATABASE].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, count);
}

export function simulateRealisticFindings(
  paths: string[],
): VulnerabilityDefinition[] {
  const findings: VulnerabilityDefinition[] = [];

  paths.forEach((path) => {
    VULNERABILITY_DATABASE.forEach((vuln) => {
      vuln.testPatterns.forEach((pattern) => {
        if (path.includes(pattern) && Math.random() < vuln.likelihood) {
          findings.push(vuln);
        }
      });
    });
  });

  // Remove duplicates
  return findings.filter(
    (vuln, index, self) => index === self.findIndex((v) => v.id === vuln.id),
  );
}
